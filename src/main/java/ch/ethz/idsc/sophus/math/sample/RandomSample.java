// code by jph
package ch.ethz.idsc.sophus.math.sample;

import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import ch.ethz.idsc.tensor.Tensor;
import ch.ethz.idsc.tensor.Tensors;
import ch.ethz.idsc.tensor.pdf.RandomVariate;

/** RandomSample is a generalization of {@link RandomVariate}.
 * 
 * <p>inspired by
 * <a href="https://reference.wolfram.com/language/ref/RandomSample.html">RandomSample</a> */
public enum RandomSample {
  ;
  private static final Random RANDOM = new Random();

  /** @param tensor
   * @return random permutation of entries of tensor */
  public static Tensor of(Tensor tensor) {
    return Tensor.of(stream(tensor));
  }

  /** @param tensor
   * @return stream of entries of tensor in random order */
  public static Stream<Tensor> stream(Tensor tensor) {
    List<Integer> list = IntStream.range(0, tensor.length()) //
        .boxed() //
        .collect(Collectors.toList());
    Collections.shuffle(list, RANDOM);
    return list.stream().map(tensor::get);
  }

  /** @param randomSampleInterface
   * @return single random sample generated by given randomSampleInterface */
  public static Tensor of(RandomSampleInterface randomSampleInterface) {
    return randomSampleInterface.randomSample(RANDOM);
  }

  /** @param randomSampleInterface
   * @param length
   * @return length number of random samples generated by given randomSampleInterface */
  public static Tensor of(RandomSampleInterface randomSampleInterface, int length) {
    return Tensors.vector(i -> randomSampleInterface.randomSample(RANDOM), length);
  }
}
