// code by jph
package ch.alpine.sophus.math.sample;

import java.security.SecureRandom;
import java.util.random.RandomGenerator;
import java.util.stream.Stream;

import ch.alpine.tensor.Tensor;
import ch.alpine.tensor.pdf.RandomVariate;

/** RandomSample is a generalization of {@link RandomVariate}.
 * 
 * <p>inspired by
 * <a href="https://reference.wolfram.com/language/ref/RandomSample.html">RandomSample</a> */
public enum RandomSample {
  ;
  private static final RandomGenerator RANDOM_GENERATOR = new SecureRandom();

  /** @param randomSampleInterface
   * @param randomGenerator
   * @return */
  public static Tensor of(RandomSampleInterface randomSampleInterface, RandomGenerator randomGenerator) {
    return randomSampleInterface.randomSample(randomGenerator);
  }

  /** @param randomSampleInterface
   * @return single random sample generated by given randomSampleInterface */
  public static Tensor of(RandomSampleInterface randomSampleInterface) {
    return randomSampleInterface.randomSample(RANDOM_GENERATOR);
  }

  /** @param randomSampleInterface
   * @param randomGenerator
   * @param length non-negative
   * @return
   * @throws Exception if given length is negative */
  public static Tensor of(RandomSampleInterface randomSampleInterface, RandomGenerator randomGenerator, int length) {
    return Tensor.of(stream(randomSampleInterface, randomGenerator).limit(length));
  }

  /** @param randomSampleInterface
   * @param length non-negative
   * @return length number of random samples generated by given randomSampleInterface */
  public static Tensor of(RandomSampleInterface randomSampleInterface, int length) {
    return of(randomSampleInterface, RANDOM_GENERATOR, length);
  }

  /** @param randomSampleInterface
   * @param randomGenerator
   * @return a new infinite stream of random samples from given randomSampleInterface */
  public static Stream<Tensor> stream(RandomSampleInterface randomSampleInterface, RandomGenerator randomGenerator) {
    return Stream.generate(() -> randomSampleInterface.randomSample(randomGenerator));
  }

  /** @param randomSampleInterface
   * @return a new infinite stream of random samples from given randomSampleInterface */
  public static Stream<Tensor> stream(RandomSampleInterface randomSampleInterface) {
    return stream(randomSampleInterface, RANDOM_GENERATOR);
  }
}
